import telebot
import datetime
import os

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_KEY' –Ω–∞ –≤–∞—à API –∫–ª—é—á –æ—Ç BotFather
bot = telebot.TeleBot('7298626795:AAHSg1ICslDatqnQfHAVZyc5TlRrxMhpzos')

user_states = {}

# –ö—É—Ä—Å –æ–±–º–µ–Ω–∞
exchange_btc_rate = 5577915.00
exchange_eth_rate = 243251.40
exchange_ltc_rate = 6083.70
exchange_usdt_rate = 94.38 
exchange_usdc_rate = 94.38 

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
address_lengths = {
    "BTC": 34,
    "ETH": 42,
    "LTC": 34,
    "USDT TRC-20": 34,
    "USDT ERC-20": 42,
    "USDT BEP20": 34,
    "USDT Solana": 44,
    "USDT Arbitrum": 42,
    "USDC TRC-20": 34,
    "USDC ERC-20": 42,
    "USDC BEP20": 34,
    "USDC Solana": 44,
    "USDC Arbitrum": 42
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn1 = types.KeyboardButton('–ö—É–ø–∏—Ç—å')
    btn2 = types.KeyboardButton('–ü—Ä–æ–¥–∞—Ç—å')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, """‚≠ïÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç BitCash!

üîÑ –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:

‚¨áÔ∏è –ü–æ–∫—É–ø–∫–∞: 1 BTC ‚Üí 5577915.00 ‚ÇΩ
‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞: 1 BTC ‚Üí 5312300.00 ‚ÇΩ

‚¨áÔ∏è –ü–æ–∫—É–ø–∫–∞: 1 ETH ‚Üí 243251.40 ‚ÇΩ
‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞: 1 ETH ‚Üí 231668.00 ‚ÇΩ

‚¨áÔ∏è –ü–æ–∫—É–ø–∫–∞: 1 LTC ‚Üí 6083.70 ‚ÇΩ
‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞: 1 LTC ‚Üí 5794.00 ‚ÇΩ

‚¨áÔ∏è –ü–æ–∫—É–ø–∫–∞: 1 USDT TRC20 ‚Üí 94.38 ‚ÇΩ
‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞: 1 USDT TRC20 ‚Üí 89.89 ‚ÇΩ

‚¨áÔ∏è –ü–æ–∫—É–ø–∫–∞: 1 USDC TRC20 ‚Üí 94.38 ‚ÇΩ
‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞: 1 USDC TRC20 ‚Üí 89.89 ‚ÇΩ""", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å')
def services_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_btc = types.KeyboardButton('–ö—É–ø–∏—Ç—å BTC')
    btn_eth = types.KeyboardButton('–ö—É–ø–∏—Ç—å ETH')
    btn_usdt = types.KeyboardButton('–ö—É–ø–∏—Ç—å USDT')
    btn_usdc = types.KeyboardButton('–ö—É–ø–∏—Ç—å USDC')
    btn_ltc = types.KeyboardButton('–ö—É–ø–∏—Ç—å LTC')
    btn_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(btn_btc, btn_eth, btn_usdt, btn_usdc, btn_ltc, btn_back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=markup)   

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å BTC')
def buy_btc(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", callback_data="rub_btc"))
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC", callback_data="btc"))
    
    bot.send_message(message.chat.id, 
                     "–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 5609310.00 –†–£–ë - 1 BTC\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.00049 BTC\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15.05999401 BTC", 
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å ETH')
def buy_eth(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", callback_data="rub_eth"))
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH", callback_data="eth"))
    
    bot.send_message(message.chat.id, 
                     "–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 243251.40 –†–£–ë - 1 ETH\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.01 ETH\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 ETH", 
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å LTC')
def buy_ltc(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", callback_data="rub_ltc"))
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LTC", callback_data="ltc"))
    
    bot.send_message(message.chat.id, 
                     "–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 6083.70 –†–£–ë - 1 LTC\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.1 LTC\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 LTC", 
                     reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å USDT')
def buy_usdt(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("USDT TRC-20", callback_data="usdt_trc20"))
    markup.add(InlineKeyboardButton("USDT ERC-20", callback_data="usdt_erc20"))
    markup.add(InlineKeyboardButton("USDT BEP20", callback_data="usdt_bep20"))
    markup.add(InlineKeyboardButton("USDT Solana", callback_data="usdt_solana"))
    markup.add(InlineKeyboardButton("USDT Arbitrum", callback_data="usdt_arbitrum"))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –æ–±–º–µ–Ω–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ö—É–ø–∏—Ç—å USDC')
def buy_usdc(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("USDC TRC-20", callback_data="usdc_trc20"))
    markup.add(InlineKeyboardButton("USDC ERC-20", callback_data="usdc_erc20"))
    markup.add(InlineKeyboardButton("USDC BEP20", callback_data="usdc_bep20"))
    markup.add(InlineKeyboardButton("USDC Solana", callback_data="usdc_solana"))
    markup.add(InlineKeyboardButton("USDC Arbitrum", callback_data="usdc_arbitrum"))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –æ–±–º–µ–Ω–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "rub_btc":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_rub_amount_btc)
    elif call.data == "btc":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_btc_amount)
    elif call.data == "rub_eth":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_rub_amount_eth)
    elif call.data == "eth":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_eth_amount)
    elif call.data == "rub_ltc":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_rub_amount_ltc)
    elif call.data == "ltc":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LTC –¥–ª—è –æ–±–º–µ–Ω–∞:")
        bot.register_next_step_handler(msg, process_ltc_amount)
    elif call.data == "usdt_trc20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDT TRC-20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDT TRC-20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdt_trc20)
    elif call.data == "usdt_erc20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDT ERC-20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDT ERC-20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdt_erc20)
    elif call.data == "usdt_bep20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDT BEP20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDT BEP20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdt_bep20)
    elif call.data == "usdt_solana":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDT Solana.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDT Solana:")
        bot.register_next_step_handler(msg, process_rub_amount_usdt_solana)
    elif call.data == "usdt_arbitrum":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDT Arbitrum.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDT Arbitrum:")
        bot.register_next_step_handler(msg, process_rub_amount_usdt_arbitrum)
    elif call.data == "usdc_trc20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDC TRC-20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDC TRC-20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdc_trc20)
    elif call.data == "usdc_erc20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDC ERC-20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDC ERC-20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdc_erc20)
    elif call.data == "usdc_bep20":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDC BEP20.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDC BEP20:")
        bot.register_next_step_handler(msg, process_rub_amount_usdc_bep20)
    elif call.data == "usdc_solana":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDC Solana.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDC Solana:")
        bot.register_next_step_handler(msg, process_rub_amount_usdc_solana)
    elif call.data == "usdc_arbitrum":
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å USDC Arbitrum.")
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ USDC Arbitrum:")
        bot.register_next_step_handler(msg, process_rub_amount_usdc_arbitrum)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è BTC
def process_rub_amount_btc(message):
    try:
        rub_amount = float(message.text)
        btc_amount = rub_amount / exchange_btc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {btc_amount:.8f} BTC.")
        request_crypto_address(message, "BTC")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ BTC
def process_btc_amount(message):
    try:
        btc_amount = float(message.text)
        rub_amount = btc_amount * exchange_btc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {btc_amount} BTC –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å {rub_amount:.2f} —Ä—É–±–ª–µ–π.")
        request_crypto_address(message, "BTC")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è ETH
def process_rub_amount_eth(message):
    try:
        rub_amount = float(message.text)
        eth_amount = rub_amount / exchange_eth_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {eth_amount:.8f} ETH.")
        request_crypto_address(message, "ETH")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ ETH
def process_eth_amount(message):
    try:
        eth_amount = float(message.text)
        rub_amount = eth_amount * exchange_eth_rate
        bot.send_message(message.chat.id, f"–ó–∞ {eth_amount} ETH –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å {rub_amount:.2f} —Ä—É–±–ª–µ–π.")
        request_crypto_address(message, "ETH")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è LTC
def process_rub_amount_ltc(message):
    try:
        rub_amount = float(message.text)
        ltc_amount = rub_amount / exchange_ltc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {ltc_amount:.8f} LTC.")
        request_crypto_address(message, "LTC")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ LTC
def process_ltc_amount(message):
    try:
        ltc_amount = float(message.text)
        rub_amount = ltc_amount * exchange_ltc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {ltc_amount} LTC –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å {rub_amount:.2f} —Ä—É–±–ª–µ–π.")
        request_crypto_address(message, "LTC")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è USDC BEP20
def process_rub_amount_usdc_bep20(message):
    try:
        rub_amount = float(message.text)
        usdc_amount = rub_amount / exchange_usdc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {usdc_amount:.8f} USDC BEP20.")
        request_crypto_address(message, "USDC BEP20")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è USDC Solana
def process_rub_amount_usdc_solana(message):
    try:
        rub_amount = float(message.text)
        usdc_amount = rub_amount / exchange_usdc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {usdc_amount:.8f} USDC Solana.")
        request_crypto_address(message, "USDC Solana")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è USDC Arbitrum
def process_rub_amount_usdc_arbitrum(message):
    try:
        rub_amount = float(message.text)
        usdc_amount = rub_amount / exchange_usdc_rate
        bot.send_message(message.chat.id, f"–ó–∞ {rub_amount} —Ä—É–±–ª–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {usdc_amount:.8f} USDC Arbitrum.")
        request_crypto_address(message, "USDC Arbitrum")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def request_crypto_address(message, crypto_name):
    msg = bot.send_message(message.chat.id, f"üí¨ –£–∫–∞–∂–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å {crypto_name} –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_crypto_address, crypto_name)

def process_crypto_address(message, crypto_name):
    address = message.text
    if len(address) == address_lengths[crypto_name]:
        bot.send_message(message.chat.id, f"–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è {crypto_name}: {address}")
    else:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å {crypto_name} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {address_lengths[crypto_name]} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        request_crypto_address(message, crypto_name)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def back_to_main_menu(message):
    send_welcome(message)


def create_exchange_request(username, user_id, amount, crypto_address):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_id = f"order_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = (
            f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {current_time}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–°—É–º–º–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {amount}\n"
            f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {crypto_address}\n"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞
        file_path = os.path.join(os.getcwd(), f"{order_id}.txt")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        with open(file_path, "w") as file:
            file.write(content)
        
        print(f"–ó–∞—è–≤–∫–∞ {order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
    
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
create_exchange_request("Ivan", 123456, "0.5 BTC", "3Mfz7JdiPxTrA8HbMhQiKKfqkYrHbxkWPM")

print("Bot is running...")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
print("Bot is LAUNCHED")
