# -*- coding: utf-8 -*-
import telebot
import requests
import json
import random
import config
import merchant
import time
import threading
import schedule
from telebot import types

bot = telebot.TeleBot(config.token)

otdaet = ''
poluchaet = ''
summ = ''
rekvezit = ''
user_language = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def isfloat(value):
    try:
        float(value)
        return True
    except ValueError:
        return False

def start_language_selection(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button1 = types.KeyboardButton('–†—É—Å—Å–∫–∏–π')
    button2 = types.KeyboardButton('English')
    markup.add(button1, button2)
    msg = bot.send_message(message.chat.id, "üó£ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=markup)
    bot.register_next_step_handler(msg, set_language)

@bot.message_handler(commands=['start'])
def set_language(message):
    global user_language
    if message.text == '–†—É—Å—Å–∫–∏–π':
        user_language[message.from_user.id] = 'ru'
        language_prefix = "–†—É—Å—Å–∫–∏–π"
    elif message.text == 'English':
        user_language[message.from_user.id] = 'en'
        language_prefix = "English"
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return start_language_selection(message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"‚úåÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, {message.from_user.first_name} üü©.\n"
        "Changer - —ç—Ç–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ—Ç –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–±–º–µ–Ω–∞–º!" if user_language[message.from_user.id] == 'ru' else
        f"‚úåÔ∏è Welcome, {message.from_user.first_name} üü©.\n"
        "Changer is an instant cryptocurrency exchange bot.\n"
        "To start exchanging, send me /exchange"
    )
    bot.send_message(message.chat.id, welcome_message)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    start_exchange(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞
def start_exchange(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button1 = types.KeyboardButton('BTC')
    button2 = types.KeyboardButton('USDT')
    button3 = types.KeyboardButton('ETH')
    button4 = types.KeyboardButton('NEO')
    button6 = types.KeyboardButton('DOGE')
    button7 = types.KeyboardButton('LTC')
    button13 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞/Support')
    markup.add(button1, button2, button3, button4, button6, button7, button13)
    msg = bot.send_message(message.chat.id, get_text(message.from_user.id, 
        "üí∏ –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–†–û–î–ê–¢–¨:", 
        "üí∏ Specify the currency you want to SELL:"), 
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, order_2)

def get_text(user_id, ru_text, en_text):
    lang = user_language.get(user_id, 'ru')
    return ru_text if lang == 'ru' else en_text

def order_2(message):
    global otdaet
    otdaet = message.text
    if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(message.chat.id, get_text(message.from_user.id, "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @elison_smm", "üìû Contact the manager @elison_smm"))
        return

    markup1 = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button1 = types.KeyboardButton('USD')
    button2 = types.KeyboardButton('EUR')
    button3 = types.KeyboardButton('RUB')
    button4 = types.KeyboardButton('KZT')
    button6 = types.KeyboardButton('AED')
    button7 = types.KeyboardButton('CHA')
    button13 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞/Support')
    markup1.add(button1, button2, button3, button4, button6, button7, button13)
    msg = bot.send_message(message.chat.id, get_text(message.from_user.id, "ü§ë –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ü–û–õ–£–ß–ò–¢–¨:", "ü§ë Now select the currency to RECEIVE:"), reply_markup=markup1)
    bot.register_next_step_handler(msg, order_3)

def order_3(message):
    global poluchaet
    poluchaet = message.text
    url = f"https://min-api.cryptocompare.com/data/price?fsym={otdaet}&tsyms={poluchaet}"
    try:
        j = requests.get(url)
        data = json.loads(j.text)
        price = data[poluchaet]
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
        token_comission = float(merchant.comission[otdaet])
        adjusted_price = price * (1 + token_comission / 100)
        
        coin_limit = merchant.limits[otdaet]
        bot.send_message(message.chat.id, get_text(message.from_user.id, 
            f'üì• –û–±–º–µ–Ω: {otdaet} –Ω–∞ {poluchaet}\nüìà –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 {otdaet} = {adjusted_price} {poluchaet}\nüëá {coin_limit}:\n', 
            f'üì• Exchange: {otdaet} to {poluchaet}\nüìà Exchange rate: 1 {otdaet} = {adjusted_price} {poluchaet}\nüëá {coin_limit}:\n'), parse_mode="Html")
        bot.register_next_step_handler(message, order_4)
    except Exception as e:
        bot.send_message(message.chat.id, get_text(message.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}', f'‚ùå Error retrieving data: {str(e)}'))

def order_4(message):
    global summ
    if isfloat(message.text):
        summ = float(message.text)
        bot.send_message(message.chat.id, get_text(message.from_user.id, 'üëá –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã:', 'üëá Provide receiving currency details:'), parse_mode="Html")
        bot.register_next_step_handler(message, order_5)
    else:
        bot.send_message(message.chat.id, get_text(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.', '‚ùå Please enter a valid number.'))
        bot.register_next_step_handler(message, order_4)

def order_5(message):
    global rekvezit
    rekvezit = message.text
    url = f"https://min-api.cryptocompare.com/data/price?fsym={otdaet}&tsyms={poluchaet}"
    try:
        j = requests.get(url)
        data = json.loads(j.text)
        price = data[poluchaet]
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
        token_comission = float(merchant.comission[otdaet])
        adjusted_price = price * (1 + token_comission / 100)
        
        podshet = summ * adjusted_price
        token_discount = float(merchant.discount[poluchaet])
        calculate1 = (podshet * token_discount) / 100
        calculate2 = podshet - calculate1
        calculate3 = calculate2 + token_comission
        token_coin = merchant.pay[otdaet]
        
        user_lang = user_language.get(message.from_user.id, 'ru')
        language_prefix = "–†—É—Å—Å–∫–∏–π" if user_lang == 'ru' else "English"
        
        confirmation_message = (
            f'üì• –û–±–º–µ–Ω: {otdaet} –Ω–∞ {poluchaet}\n'
            f'üì• –û—Ç–¥–∞–µ—Ç–µ: {summ} {otdaet}, –ø–æ–ª—É—á–∞–µ—Ç–µ: {calculate3} {poluchaet}\n'
            f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞): {rekvezit}\n'
            f'üìà –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 {otdaet} = {adjusted_price} {poluchaet}\n'
            f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç —Å—á—ë—Ç {summ} {otdaet}\n'
            f'{token_coin}\n'
            f'üîÑ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞' if user_lang == 'ru' else
            f'üì• Exchange: {otdaet} to {poluchaet}\n'
            f'üì• You send: {summ} {otdaet}, you receive: {calculate3} {poluchaet}\n'
            f'üí≥ Receiving details (wallet number): {rekvezit}\n'
            f'üìà Exchange rate: 1 {otdaet} = {adjusted_price} {poluchaet}\n'
            f'Transfer {summ} {otdaet} to this account\n'
            f'{token_coin}\n'
            f'üîÑ Awaiting exchange confirmation'
        )
        
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text=get_text(message.from_user.id, "‚úÖ –û–ø–ª–∞—Ç–∏–ª", "‚úÖ Paid"), callback_data="accept")
        button2 = types.InlineKeyboardButton(text=get_text(message.from_user.id, "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", "‚ùå Cancel"), callback_data="cancel")
        keyboard.add(button1, button2)
        
        bot.send_message(message.chat.id, confirmation_message, reply_markup=keyboard, parse_mode="Html")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f'üíµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}) \n –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä —è–∑—ã–∫–∞: {language_prefix}\n'
            f'üì• –û–±–º–µ–Ω: {otdaet} –Ω–∞ {poluchaet}\n'
            f'üì• –û—Ç–¥–∞–µ—Ç–µ: {summ} {otdaet}, –ø–æ–ª—É—á–∞–µ—Ç–µ: {calculate3} {poluchaet}\n'
            f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞): {rekvezit}\n'
            f'üìà –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 {otdaet} = {adjusted_price} {poluchaet}\n'
            f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç –Ω–∞ —ç—Ç–æ—Ç —Å—á—ë—Ç {summ} {otdaet}\n'
            f'{token_coin}\n'
        )
        
        for user_number in range(len(config.adminid)):
            chat_id = config.adminid[user_number]
            if chat_id:
                bot.send_message(chat_id=chat_id, text=admin_message)
            else:
                print("–û—à–∏–±–∫–∞: chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, get_text(message.from_user.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}', f'‚ùå Error processing request: {str(e)}'))

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    message = call.message
    user_name = call.from_user.first_name  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if call.message:
        if call.data == "accept":
            bot.send_message(message.chat.id, get_text(call.from_user.id, "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É.\n –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 - 15 –º–∏–Ω—É—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞.\n –ß—Ç–æ-–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ–±–º–µ–Ω –≤–≤–µ–¥–∏—Ç–µ /exchange", "‚úÖ You confirmed the payment.\n Funds will be credited within 5 - 15 minutes, depending on website load.\n To make another exchange, type /exchange"))
            notify_admins_payment_accepted(user_name, message.chat.id)
        elif call.data == "cancel":
            bot.send_message(message.chat.id, get_text(call.from_user.id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É.\n –ß—Ç–æ-–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ–±–º–µ–Ω –≤–≤–µ–¥–∏—Ç–µ /exchange", "‚ùå You canceled the payment.\n To make another exchange, type /exchange"))
            notify_admins_payment_canceled(user_name, message.chat.id)

def notify_admins_payment_accepted(user_name, user_chat_id):
    for admin_id in config.adminid:
        bot.send_message(chat_id=admin_id, text=f'üíµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_chat_id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É. –ñ–¥–∏—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.')

def notify_admins_payment_canceled(user_name, user_chat_id):
    for admin_id in config.adminid:
        bot.send_message(chat_id=admin_id, text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_chat_id}) –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É.')

def notify_admins_bot_started():
    for admin_id in config.adminid:
        bot.send_message(chat_id=admin_id, text="üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        	
def notify_admins_restart_in_5_minutes():
    for admin_id in config.adminid:
        bot.send_message(chat_id=admin_id, text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

def run_scheduled_tasks():
    schedule.every().hour.at(":00").do(notify_admins_restart_in_5_minutes)
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_bot():
    print('10%')
    time.sleep(0.3)
    print('20%')
    time.sleep(0.3)
    print('30%')
    time.sleep(0.3)
    print('40%')
    time.sleep(0.3)
    print('50%')
    time.sleep(0.3)
    print('60%')
    time.sleep(0.3)
    print('70%')
    time.sleep(0.3)
    print('80%')
    time.sleep(0.3)
    print('90%')
    time.sleep(0.3)
    print('100%')
    time.sleep(0.3)
    print('BOT START WORK')
    notify_admins_bot_started()
    bot.polling(none_stop=True)

if __name__ == "__main__":
    threading.Thread(target=run_scheduled_tasks, daemon=True).start()
    run_bot()
